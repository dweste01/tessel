function e(e){this.hardware=e,this.chipSelect=e.digital[0],this.reset=e.digital[1],this.irq=e.digital[2].rawWrite(!1),this.defaultSPISettings={clockSpeed:1e3,chipSelect:this.chipSelect,chipSelectDelayUs:30},this.spi=e.SPI(this.defaultSPISettings),this.transmitting=!1,this.listening=!1,this.chipSelect.output(!0),this.reset.output(!0),this.messageQueue=new o}var t=require("util"),r=require("events"),n=require("./attiny-isp"),o=require("sync-queue"),i=22,u=85,s=51,a=0,f=1,c=7,l=8,p=1;t.inherits(e,r.EventEmitter),e.prototype.initialize=function(e,t,r){function n(e,t){return!!e&&(t&&t(Error("Unable to communicate with module. Are you sure it's plugged in?")),!0)}var o=this;t=t||{},o._reset(e,function(){o._establishCommunication(function(e,i,u){e?(console.warn("Could not retrieve firmware version and module ID. Attempting update."),o.updateFirmware(t,function(e){n(e,r)||o._establishCommunication(function(e,i,u){n(e,r)||o._checkModuleInformation(t,i,u,r)})})):o._checkModuleInformation(t,i,u,r)})})},e.prototype._checkModuleInformation=function(e,t,r,n){var o=this;if(e.moduleID==r&&e.firmwareVersion==t)n&&n();else if(255===t&&255===r||0===r||255===r)console.warn("Old module firmware detected. Updating..."),o.updateFirmware(e,n);else{if(r!=e.moduleID)return void(n&&n(Error("Wrong module plugged into port. Expected moduleID of "+e.moduleID+" but received "+r+" .Aborting Initialization.")));t!=e.firmwareVersion&&(console.warn("Module firmware version incompatible. Updating to correct version..."),o.updateFirmware(e,n))}},e.prototype._reset=function(e,t){this.reset.low(),this.reset.high(function(){setTimeout(t,e)})},e.prototype._establishCommunication=function(e){var t=this;t.getFirmwareVersion(function(r,n){if(r){if(e)return void e(r)}else t.getModuleID(function(t,r){e&&e(t,n,r)})})},e.prototype.getFirmwareVersion=function(e){this.getModuleInformation(f,e)},e.prototype.getModuleID=function(e){this.getModuleInformation(l,e)},e.prototype.getModuleInformation=function(e,t){var r=this;r.transceive(new Buffer([e,0,0]),function(n,o){if(n)return t(n,null);r._validateResponse(o,[u,e])&&3===o.length?t&&t(null,o[2]):t&&t(Error("Error retrieving Module Information."))})},e.prototype.updateFirmware=function(e,t){var r=this;n.updateFirmware(this.hardware,e,function(n){if(n)return void(t&&t(Error("Unable to update firmware: "+n.message)));r._reset(function(){r.spi=r.hardware.SPI(r.defaultSPISettings),r.CRCCheck(e.crc,t)})})},e.prototype._validateResponse=function(e,t,r){var n,o=!0;for(n=0;n<t.length;n++)if(0!=t[n]&&t[n]!=e[n]){o=!1;break}return r&&r(o),o},e.prototype.setIRQCallback=function(e){this.irq.once("high",e)},e.prototype.transceive=function(e,t){var r=this;this.messageQueue.place(function(){r.spi.transfer(e,function(e,n){t&&t(e,n),setTimeout(r.messageQueue.next.bind(r),p)})})},e.prototype.CRCCheck=function(e,t){var r=this;void 0==e&&t&&t(),r.getCRC(function(r,n){if(t){if(r)return void t(r);n!=e?t(Error("CRCs do not match.")):t()}})},e.prototype.getCRC=function(e){var t=this;t.transceive(new Buffer([c,0,0,0]),function(r,n){if(e){if(r)return void e(r);t._validateResponse(n,[u,c,!1,!1])&&4===n.length?e&&e(null,n[2]<<8|n[3]):e&&e(Error("Invalid response from CRC check."))}})},module.exports=e;